cmake_minimum_required(VERSION 3.5)

# 工程名称
project(demo VERSION ${PROJECT_VERSION})
message(STATUS "${PROJECT_NAME} v${PROJECT_VERSION}")

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# qt
find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets) # 识别是Qt6还是Qt5
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)

file(GLOB_RECURSE CPP_SOURCE_FILES *.cpp *.cxx *.cc)
file(GLOB_RECURSE CPP_INCLUDE_FILES *.hpp *.h)
file(GLOB_RECURSE RESOURCES *.qrc *.rc)

set(PROJECT_SOURCES ${CPP_SOURCE_FILES} ${CPP_INCLUDE_FILES} ${RESOURCES})

# 制作可执行文件
add_executable(${PROJECT_NAME} WIN32 # console窗口
  ${PROJECT_SOURCES})

target_include_directories(
  ${PROJECT_NAME}
  PUBLIC $<INSTALL_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
  PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)

target_link_libraries(${PROJECT_NAME} PRIVATE Qt${QT_VERSION_MAJOR}::Widgets imagetoolbox)

install(
  TARGETS ${PROJECT_NAME}
  RUNTIME DESTINATION CMAKE_RUNTIME_OUTPUT_DIRECTORY
  LIBRARY DESTINATION CMAKE_LIBRARY_OUTPUT_DIRECTORY
  ARCHIVE DESTINATION CMAKE_ARCHIVE_OUTPUT_DIRECTORY
  BUNDLE DESTINATION CMAKE_RUNTIME_OUTPUT_DIRECTORY
)
